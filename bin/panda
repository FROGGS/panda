#!/usr/bin/env perl6
use File::Mkdir;
use Panda;

subset Command of Str where
    'install' | 'list' | 'update';

sub installprojects($panda, @args) {
    for @args -> $x {
        try { $panda.resolve($x) };
        say $! if $!;
    }
}

sub listprojects($panda) {
    for $panda.ecosystem.project-list -> $p {
        my $x = $panda.ecosystem.get-project($p);
        printf "%-20s\t%s\n", $x.name, $x.metainfo<description>;
    }
}

sub execute(Command $c, $panda, @args) {
    given $c {
        when 'install' { 
            installprojects($panda, @args);
        }
        when 'list' {
            listprojects($panda);
        }
        when 'update' {
            $panda.ecosystem.update;
        }
    }
}

# default opts for MAIN
if %*ENV<PANDA_DEFAULT_OPTS> {
    @*ARGS = %*ENV<PANDA_DEFAULT_OPTS> ~ (@*ARGS ?? ' ' ~ @*ARGS !! '');
}

# initialize the Panda object
my $panda;
{
    my $pandadir = %*ENV<HOME> ~ '/.panda';
    mkdir $pandadir, :p unless $pandadir.IO ~~ :d;

    my $projectsfile = "$pandadir/projects.json";
    unless $projectsfile.IO ~~ :f {
        run "wget http://feather.perl6.nl:3000/list -O $projectsfile";
    }

    $panda = Panda.new(
        srcdir       => "$pandadir/src",
        destdir      => %*ENV<HOME> ~ '/.perl6',
        statefile    => "$pandadir/state",
        projectsfile => "$pandadir/projects.json"
    );
}

multi MAIN (Command $command, *@args) {
    execute($command, $panda, @args);
}

multi MAIN () {
    while prompt('panda> ') -> $c {
        my ($command, @args) = $c.split(' ');
        try {
            execute($command, $panda, @args);
            CATCH {
                say "Unknown command: $command";
            }
        }
    }
    say ''; # the newline after exiting the REPL
}

# vim: ft=perl6
